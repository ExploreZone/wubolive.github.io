{"meta":{"title":"Hexo","subtitle":null,"description":null,"author":"John Doe","url":"http://blog.wubolive.com"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2018-11-30T09:49:48.963Z","updated":"2018-11-30T09:49:48.950Z","comments":false,"path":"/404.html","permalink":"http://blog.wubolive.com//404.html","excerpt":"","text":""},{"title":"分类","date":"2018-11-30T09:49:49.489Z","updated":"2018-11-30T09:49:48.960Z","comments":false,"path":"categories/index.html","permalink":"http://blog.wubolive.com/categories/index.html","excerpt":"","text":""},{"title":"关于","date":"2018-11-30T09:49:49.464Z","updated":"2018-11-30T09:49:48.955Z","comments":false,"path":"about/index.html","permalink":"http://blog.wubolive.com/about/index.html","excerpt":"","text":"一个来自南方的北漂少年 · 阿波Linux | 云计算 | DevOps | 数据库 | Python | 大数据本人比较喜欢使用Markdown语法写文章，所以之前用Hexo驱动在github.com中搭建了一个博客http://blog.wubolive.com，但因为管理不灵活而将博客迁移到Leanote 新浪微博：@那繁华之处"},{"title":"Repositories","date":"2018-11-30T09:49:48.964Z","updated":"2018-11-30T09:49:48.964Z","comments":false,"path":"repository/index.html","permalink":"http://blog.wubolive.com/repository/index.html","excerpt":"","text":""},{"title":"书单","date":"2018-11-30T09:49:48.958Z","updated":"2018-11-30T09:49:48.958Z","comments":false,"path":"books/index.html","permalink":"http://blog.wubolive.com/books/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2018-11-30T09:49:48.963Z","updated":"2018-11-30T09:49:48.962Z","comments":true,"path":"links/index.html","permalink":"http://blog.wubolive.com/links/index.html","excerpt":"","text":""},{"title":"标签","date":"2018-11-30T09:49:49.521Z","updated":"2018-11-30T09:49:48.965Z","comments":false,"path":"tags/index.html","permalink":"http://blog.wubolive.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Harbr更改端口","slug":"k8s-harbor-port","date":"2018-11-30T06:36:28.000Z","updated":"2018-12-04T01:08:49.036Z","comments":true,"path":"2018/11/30/k8s-harbor-port/","link":"","permalink":"http://blog.wubolive.com/2018/11/30/k8s-harbor-port/","excerpt":"","text":"前言默认情况下，Harbor的侦听端口80(HTTP)和443(HTTPS)，因某原因无法使用80或443端口可按照本方法更改。修改docker-compose.yml文件找到nginx镜像配置,将外网映射端口改成未被占用的端口123456789101112131415161718[root@hub harbor]# vim docker-compose.yml proxy: image: goharbor/nginx-photon:v1.6.2 container_name: nginx restart: always volumes: - ./common/config/nginx:/etc/nginx:z networks: - harbor ports: - 88:80 - 843:443 - 8443:4443 depends_on: - postgresql - registry - ui - log更改harbor.cfg文件将hostname添加上映射端口12[root@hub harbor]# vim harbor.cfg hostname = hub.wubolive.com:88重启docker-compose12[root@hub harbor]# docker-compose down -v[root@hub harbor]# ./install","categories":[{"name":"K8s","slug":"K8s","permalink":"http://blog.wubolive.com/categories/K8s/"},{"name":"Docker","slug":"K8s/Docker","permalink":"http://blog.wubolive.com/categories/K8s/Docker/"}],"tags":[{"name":"K8s","slug":"K8s","permalink":"http://blog.wubolive.com/tags/K8s/"},{"name":"Docker","slug":"Docker","permalink":"http://blog.wubolive.com/tags/Docker/"}]},{"title":"Harbor私有仓库安装","slug":"k8s-harbor-install","date":"2018-11-30T06:36:28.000Z","updated":"2018-12-04T01:08:47.072Z","comments":true,"path":"2018/11/30/k8s-harbor-install/","link":"","permalink":"http://blog.wubolive.com/2018/11/30/k8s-harbor-install/","excerpt":"","text":"Harbor安装https://github.com/vmware/harbor/releases 中下载Harbor online installer离线安装包123[root@hub ~]# wget https://storage.googleapis.com/harbor-releases/release-1.6.0/harbor-online-installer-v1.6.2.tgz[root@hub ~]# tar zxf harbor-online-installer-v1.6.2.tgz [root@hub ~]# cd harbor/配置harbor如果不想已80端口运行，请查看：http://www.wubolive.com/post/harbor-port123456789#更改映射端口可修改[root@hub harbor]# vim harbor.cfghostname = hub.wubolive.com #配置访问地址ui_url_protocol = http harbor_admin_password = 123456 #Web登录页面密码# 准备配置文件[root@hub harbor]# ./prepare# 安装启动harbor[root@hub harbor]# ./install.sh查看以运行的docker容器12345678910[root@hub harbor]# docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMESc39813d51868 goharbor/nginx-photon:v1.6.2 &quot;nginx -g &apos;daemon of…&quot; 3 minutes ago Up 3 minutes (healthy) 0.0.0.0:80-&gt;80/tcp, 0.0.0.0:443-&gt;443/tcp, 0.0.0.0:4443-&gt;4443/tcp nginxc80e7a781c7a goharbor/harbor-jobservice:v1.6.2 &quot;/harbor/start.sh&quot; 3 minutes ago Up 3 minutes harbor-jobservice189ed8429b30 goharbor/harbor-ui:v1.6.2 &quot;/harbor/start.sh&quot; 3 minutes ago Up 3 minutes (healthy) harbor-ui99774d0dd424 goharbor/redis-photon:v1.6.2 &quot;docker-entrypoint.s…&quot; 3 minutes ago Up 3 minutes 6379/tcp redis9eead178687e goharbor/harbor-db:v1.6.2 &quot;/entrypoint.sh post…&quot; 3 minutes ago Up 3 minutes (healthy) 5432/tcp harbor-db82a2cfce37ee goharbor/harbor-adminserver:v1.6.2 &quot;/harbor/start.sh&quot; 3 minutes ago Up 3 minutes (healthy) harbor-adminserver9314f9963d75 goharbor/registry-photon:v2.6.2-v1.6.2 &quot;/entrypoint.sh /etc…&quot; 3 minutes ago Up 3 minutes (healthy) 5000/tcp registry3cdab5ca0e61 goharbor/harbor-log:v1.6.2 &quot;/bin/sh -c /usr/loc…&quot; 3 minutes ago Up 3 minutes (healthy) 127.0.0.1:1514-&gt;10514/tcp harbor-log访问Harbor浏览器输入：http://hub.wubolive.com登入账号：admin登入密码：123456在面板中创建一个用户K8S并加入library项目上传docker镜像因docker默认不支持http方式上传镜像，所有需要在配置文件中指明使用http访问12345[root@hub harbor]# vim /etc/docker/daemon.json &#123; &quot;registry-mirrors&quot;: [&quot;http://cc51a693.m.daocloud.io&quot;], &quot;insecure-registries&quot;: [&quot;hub.wubolive.com&quot;]&#125;登入Harbor12345[root@hub harbor]# docker login hub.wubolive.comUsername: k8sPassword: Login Succeeded# 显示Login Succeeded说明登入成功推送镜像格式：1234# docker tag 镜像中心域名/项目名称/镜像名:版本docker tag SOURCE_IMAGE[:TAG] hub.wubolive.com/library/IMAGE[:TAG]# docker push 更改tag后的镜像名docker push hub.wubolive.com/library/IMAGE[:TAG]拉取镜像格式：1docker pull hub.wubolive.com/library/nginx:latest附：以HTTPS方式部署Harborhttps://github.com/goharbor/harbor/blob/master/docs/configure_https.md","categories":[{"name":"K8s","slug":"K8s","permalink":"http://blog.wubolive.com/categories/K8s/"},{"name":"Docker","slug":"K8s/Docker","permalink":"http://blog.wubolive.com/categories/K8s/Docker/"}],"tags":[{"name":"K8s","slug":"K8s","permalink":"http://blog.wubolive.com/tags/K8s/"},{"name":"Docker","slug":"Docker","permalink":"http://blog.wubolive.com/tags/Docker/"}]},{"title":"Linux以虚拟用户方式安装Vsftpd","slug":"vsftpd-install","date":"2018-11-30T06:36:28.000Z","updated":"2018-12-04T01:07:20.857Z","comments":true,"path":"2018/11/30/vsftpd-install/","link":"","permalink":"http://blog.wubolive.com/2018/11/30/vsftpd-install/","excerpt":"","text":"说明：vsftpd的版本：vsftpd-3.0.2-22.el7.x86_64ftp 根目录 : /data/ftpftp 配置文件目录：/etc/vsftpdftp 虚拟用户权限配置文件目录：/etc/vsftpd/vuser_config实现目标：匿名用户可以登录，但是不能访问虚拟用户的宿主目录，只能访问共享目录虚拟用户对自己的宿主目录有任何权限，且只能在自己宿主目录中操作搭建过程1.安装vsftpd，ftp和libdb-utils(需要安装db包，用来加密虚拟用户的账户信息,centos7默认安装好了)1[root@CentOS ~]# yum install vsftpd ftp -y2.创建本地用户[用于映射虚拟用户]1234567#建立ftp用户目录[root@CentOS ~]# mkdir -p /ftp-dir#创建用户[root@CentOS ~]# useradd -d /ftp-dir/ vftpuser -s /sbin/nologin #更改权限和主组权限[root@CentOS ~]# chmod 755 /ftp-dir[root@CentOS ~]# chown vftpuser.root /ftp-dir3.创建虚拟用户[用户和密码]文件12345[root@CentOS ~]# vim /etc/vsftpd/vuseradmin [用户名]123456 [密码]devops [用户名]123456 [密码]4.加密用户密码文件生成数据库文件123[root@CentOS ~]# cd /etc/vsftpd/[root@CentOS ~]# db_load -T -t hash -f ./vuser ./login.db[root@CentOS ~]# chmod 600 login.db5.创建PAM认证文件1234[root@CentOS ~]# vim /etc/pam.d/vsftpd.vuauth required /lib64/security/pam_userdb.so db=/etc/vsftpd/login #注意64位系统写/lib64这个路径，32位系统要写成/lib，下同！account required /lib64/security/pam_userdb.so db=/etc/vsftpd/login6.修改配置文件1234567891011121314151617181920212223242526272829303132[root@CentOS ~]# vi /etc/vsftpd/vsftpd.conf#允许匿名用户访问anonymous_enable=yeslocal_enable=YESwrite_enable=YESlocal_umask=022dirmessage_enable=YESxferlog_enable=YESconnect_from_port_20=YESxferlog_file=/var/log/xferlogxferlog_std_format=YESlisten=NOlisten_ipv6=YES#修改ftp默认目录到/ftp-dir下面chroot_local_user=YESlocal_root=/ftp-diranon_root=/ftp-dir#pam认证文件pam_service_name=vsftpd.vu#虚拟用户权限配置目录user_config_dir=/etc/vsftpd/ftploginuserlist_enable=YEStcp_wrappers=YESallow_writeable_chroot=YESone_process_model=NO#开启虚拟用户guest_enable=YESguest_username=vftpuser注意，如果vsftpd的版本是：vsftpd-2.2.2-24.el6.x86_64那么vsftpd.conf的配置文件修改如下,其他操作一样，不然的话2.2.2版本启动时会遇到各种问题：123456789101112131415161718listen=YESlocal_enable=YESanon_umask=022anonymous_enable=YESpam_service_name=vsftpd.vuuserlist_enable=YESchroot_local_user=YESlocal_root=/ftp-diranon_root=/ftp-dirguest_enable=YESguest_username=vftpuseruser_config_dir=/etc/vsftpd/ftploginuserlist_enable=YESxferlog_enable=YESxferlog_std_format=YESxferlog_file=/var/log/xferlogdual_log_enable=YESvsftpd_log_file=/var/log/vsftpd.log7.重启vsftpd服务1[root@CentOS ~]# systemctl restart vsftpd8.创建虚拟用户[权限]配置文件123456789101112131415[root@CentOS ~]# mkdir /etc/vsftpd/ftplogin[root@CentOS ~]# cd /etc/vsftpd/ftplogin[root@CentOS ~]# vi abc [有所有权限]#设置登录后禁锢的目录local_root=/ftp-dir/admin#开放写权限write_enable=yes#开放下载权限anon_world_readable_only=no#开放上传权限anon_upload_enable=yes#开放创建目录的权限anon_mkdir_write_enable=yes#开放删除和重命名的权限anon_other_write_enable=yes1234# vi bcd [只有上传下载的权限]local_root=/ftp-dir/devopsanon_upload_enable=yesanon_world_readable_only=no9.更改虚拟用户目录权限1234#如果不更改的话，匿名用户是可以访问到的[root@CentOS ~]# mkdir /ftp-dir/admin &amp;&amp; chmod 700 /ftp-dir/admin[root@CentOS ~]# mkdir /ftp-dir/devops &amp;&amp; chmod 700 /ftp-dir/devops[root@CentOS ~]# chown -R vftpuser.root /ftp-dir10.测试访问。1234567891011[root@CentOS ~]# ftp 127.0.0.1Connected to 127.0.0.1 (127.0.0.1).220 (vsFTPd 3.0.2)Name (127.0.0.1:root): devops331 Please specify the password.Password:230 Login successful.Remote system type is UNIX.Using binary mode to transfer files.ftp&gt; exit221 Goodbye.11.添加用户(不需要重启vsftpd服务)1234567891011121314#添加新用户test，密码为abcd[root@CentOS ~]# vim /etc/vsftpd/vuseradmin123456devops123456user1123456#创建test用户对应的目录并授权[root@CentOS ~]# mkdir /ftp-dir/user1 &amp;&amp; chown vuser:root /ftp-dir/user1#重新生成加密的db文件[root@CentOS ~]# cd /etc/vsftpd[root@CentOS ~]# db_load -T -t hash -f ./vuser ./login.db#删除用户就是把添加用户的操作撤销，然后删除加密的db文件重新生成即可。12.测试访问，此时添加的test用户的/ftp-dir/test目录的权限是755，匿名用户可以登录。若要屏蔽，修改权限为700即可。1[root@CentOS ~]# ftp 127.0.0.113.错误处理错误1：226 Transfer done (but failed to open directory)解决：selinux 和防火墙导致错误2：500 OOPS: vsftpd: refusing to run with writable root inside chroot()解决：配置文件中加入 allow_writeable_chroot=YES 针对标准vsftpd(standonly)模式，然后重启ftp.vsftp上传文件权限问题file_open_mode上传档案的权限，与chmod 所使用的数值相同。如果希望上传的文件可以执行，设此值为0777。默认情况下vsftp上传之后文件的权限是600，目录权限是700local_umask=xxx这是指定本地用户上传后的文件权限设置anon_umask=xxx这是指定虚拟用户上传后的文件权限设置umask是unix操作系统的概念，umask决定目录和文件被创建时得到的初始权限umask = 022时，新建的目录 权限是755，文件的权限是 644umask = 077时，新建的目录 权限是700，文件的权限时 600","categories":[{"name":"Linux","slug":"Linux","permalink":"http://blog.wubolive.com/categories/Linux/"}],"tags":[{"name":"FTP","slug":"FTP","permalink":"http://blog.wubolive.com/tags/FTP/"}]},{"title":"Ansible Ad-Hoc命令集","slug":"ansible-hoc","date":"2018-11-30T06:13:28.000Z","updated":"2018-11-30T13:43:04.902Z","comments":true,"path":"2018/11/30/ansible-hoc/","link":"","permalink":"http://blog.wubolive.com/2018/11/30/ansible-hoc/","excerpt":"","text":"ansible命令使用方法123456789101112131415161718192021222324ansible &lt;host-pattern&gt; [options]可用选项如下。 -v,--verbose:输出更详细的执行过程信息,-vvv可得到执行过程所有信息。 -i PATH,--inventory=PATH:指定inventory信息,默认/etc/absible/hosts。 -f NUM,--forks=NUM:并发线程数,默认5个线程。 --private-key=PRIVATE_KEY_FILE:指定密钥文件。 -m NAME,--module-name=NAME:指定执行使用的模块。 -M DIRECTORY,--module-path=DIRECTORY:指定模块存放路径,默认/usr/share/ansible,也可以通过ANSIBLE_LIBRARY设定默认路径。 -a &apos;ARGUMENTS&apos;,--args=&apos;ARGUMENTS&apos;:模块参数。 -k,--ask-pass SSH:认证密码。 -K,--ask-sudo-pass sudo:用户的密码(--sudo时使用)。 -o,--one-line:标准输出至一行。 -s,--sudo:相当于Linux系统下的sudo命令。 -t DIRECTORY,--tree=DIRECTORY:输出信息至DIRECTORY目录下,结果文件以远程主机名命名。 -T SECONDS,--timeout=SECONDS:指定连接远程主机的最大超时,单位是秒。 -B NUM,--background=NUM:后台执行命令,超NUM秒后中止正在执行的任务。 -P NUM,--poll=NUM:定期返回后台任务进度。 -u USERNAME,--user=USERNAME:指定远程主机以USERNAME运行命令。 -U SUDO_USERNAME,--sudo-user=SUDO_USERNAME:使用sudo,相当于Linux下的sudo命令。 -c CONNECTION,--connection=CONNECTION:指定连接方式,可用选项paramiko(SSH)、ssh、local,local方式常 用于crontab和kickstarts。 -l SUBSET,--limit=SUBSET:指定运行主机。 -l ~REGEX,--limit=~REGEX:指定运行主机(正则)。 --list-hosts:列出符合条件的主机列表,不执行任何命令。情景1:检查all组所有主机是否存活12345678910111213[root@Ansible ~]# ansible all -f 5 -m ping36.103.245.138 | SUCCESS =&gt; &#123; &quot;changed&quot;: false, &quot;ping&quot;: &quot;pong&quot;&#125;36.103.245.70 | SUCCESS =&gt; &#123; &quot;changed&quot;: false, &quot;ping&quot;: &quot;pong&quot;&#125;36.103.245.135 | SUCCESS =&gt; &#123; &quot;changed&quot;: false, &quot;ping&quot;: &quot;pong&quot;&#125;情景2:返回all组所有主机的hostname123456789[root@Ansible ~]# ansible all -s -m command -a &apos;hostname&apos; 36.103.245.138 | SUCCESS | rc=0 &gt;&gt;node136.103.245.70 | SUCCESS | rc=0 &gt;&gt;node236.103.245.135 | SUCCESS | rc=0 &gt;&gt;master流程图情景3：列出all组所有主机列表12345[root@Ansible ~]# ansible all --list hosts (3): 36.103.245.135 36.103.245.138 36.103.245.70情景4：列出all组所有主机磁盘使用情况1234567891011121314151617181920212223[root@Ansible ~]# ansible all -a &apos;df -lh&apos;36.103.245.138 | SUCCESS | rc=0 &gt;&gt;Filesystem Size Used Avail Use% Mounted ondevtmpfs 7.9G 0 7.9G 0% /devtmpfs 7.9G 0 7.9G 0% /dev/shmtmpfs 7.9G 57M 7.8G 1% /run/dev/vda2 36G 2.8G 31G 9% /36.103.245.70 | SUCCESS | rc=0 &gt;&gt;Filesystem Size Used Avail Use% Mounted ondevtmpfs 7.9G 0 7.9G 0% /devtmpfs 7.9G 0 7.9G 0% /dev/shmtmpfs 7.9G 57M 7.8G 1% /run/dev/vda2 36G 2.8G 31G 9% //dev/vdb1 99G 61M 94G 1% /home36.103.245.135 | SUCCESS | rc=0 &gt;&gt;Filesystem Size Used Avail Use% Mounted ondevtmpfs 7.9G 0 7.9G 0% /devtmpfs 7.9G 0 7.9G 0% /dev/shmtmpfs 7.9G 185M 7.7G 3% /run/dev/vda2 36G 25G 9.4G 72% //dev/vdb1 99G 61M 94G 1% /home情景5：列出all组所有主机内存使用情况123456789101112131415[root@Ansible ~]# ansible all -m shell -a &quot;free -h&quot;36.103.245.138 | SUCCESS | rc=0 &gt;&gt; total used free shared buff/cache availableMem: 15G 384M 13G 56M 1.4G 14GSwap: 0B 0B 0B36.103.245.70 | SUCCESS | rc=0 &gt;&gt; total used free shared buff/cache availableMem: 15G 377M 13G 56M 1.3G 14GSwap: 0B 0B 0B36.103.245.135 | SUCCESS | rc=0 &gt;&gt; total used free shared buff/cache availableMem: 15G 839M 11G 184M 3.1G 14GSwap: 0B 0B 0Bansible-doc命令使用方法123456789ansible-doc [options] [module...]可用选项如下。 --version:显示工具版本号 -h,--help:显示该help说明 -M MODULE_PATH,--module-path=MODULE_PATH:指定Ansible模块的默认加载目录。 -l,--list:列出所有可用的模块。 -s,--snippet:只显示playbook说明的代码段。 -v:显示工具版本号。【示例1】安装redhat-lsb并查看服务器系统版本号。步骤1：安装redhat-lsb123456789101112131415161718192021222324[root@Ansible ~]# ansible all -m yum -a &quot;name=redhat-lsb state=present&quot;36.103.245.138 | SUCCESS =&gt; &#123; &quot;changed&quot;: false, &quot;msg&quot;: &quot;&quot;, &quot;rc&quot;: 0, &quot;results&quot;: [ &quot;redhat-lsb-4.1-27.el7.centos.1.x86_64 providing redhat-lsb is already installed&quot; ]&#125;36.103.245.70 | SUCCESS =&gt; &#123; &quot;changed&quot;: false, &quot;msg&quot;: &quot;&quot;, &quot;rc&quot;: 0, &quot;results&quot;: [ &quot;redhat-lsb-4.1-27.el7.centos.1.x86_64 providing redhat-lsb is already installed&quot; ]&#125;36.103.245.135 | SUCCESS =&gt; &#123; &quot;changed&quot;: false, &quot;msg&quot;: &quot;&quot;, &quot;rc&quot;: 0, &quot;results&quot;: [ &quot;redhat-lsb-4.1-27.el7.centos.1.x86_64 providing redhat-lsb is already installed&quot; ]步骤2：查看系统版本号123456789101112131415161718192021[root@Ansible ~]# ansible all -m command -a &quot;lsb_release -a&quot;36.103.245.138 | SUCCESS | rc=0 &gt;&gt;LSB Version: :core-4.1-amd64:core-4.1-noarch:cxx-4.1-amd64:cxx-4.1-noarch:desktop-4.1-amd64:desktop-4.1-noarch:languages-4.1-amd64:languages-4.1-noarch:printing-4.1-amd64:printing-4.1-noarchDistributor ID: CentOSDescription: CentOS Linux release 7.3.1611 (Core) Release: 7.3.1611Codename: Core36.103.245.70 | SUCCESS | rc=0 &gt;&gt;LSB Version: :core-4.1-amd64:core-4.1-noarch:cxx-4.1-amd64:cxx-4.1-noarch:desktop-4.1-amd64:desktop-4.1-noarch:languages-4.1-amd64:languages-4.1-noarch:printing-4.1-amd64:printing-4.1-noarchDistributor ID: CentOSDescription: CentOS Linux release 7.3.1611 (Core) Release: 7.3.1611Codename: Core36.103.245.135 | SUCCESS | rc=0 &gt;&gt;LSB Version: :core-4.1-amd64:core-4.1-noarch:cxx-4.1-amd64:cxx-4.1-noarch:languages-4.1-amd64:languages-4.1-noarch:printing-4.1-amd64:printing-4.1-noarchDistributor ID: CentOSDescription: CentOS Linux release 7.3.1611 (Core) Release: 7.3.1611Codename: Core【示例2】为所有服务器安装ntp服务,并设置为开机启动步骤1：安装ntp服务12345678910111213141516171819202122232425[root@Ansible ~]# ansible all -s -m yum -a &quot;name=ntp state=present&quot;36.103.245.138 | SUCCESS =&gt; &#123; &quot;changed&quot;: false, &quot;msg&quot;: &quot;&quot;, &quot;rc&quot;: 0, &quot;results&quot;: [ &quot;ntp-4.2.6p5-28.el7.centos.x86_64 providing ntp is already installed&quot; ]&#125;36.103.245.70 | SUCCESS =&gt; &#123; &quot;changed&quot;: false, &quot;msg&quot;: &quot;&quot;, &quot;rc&quot;: 0, &quot;results&quot;: [ &quot;ntp-4.2.6p5-28.el7.centos.x86_64 providing ntp is already installed&quot; ]&#125;36.103.245.135 | SUCCESS =&gt; &#123; &quot;changed&quot;: false, &quot;msg&quot;: &quot;&quot;, &quot;rc&quot;: 0, &quot;results&quot;: [ &quot;ntp-4.2.6p5-28.el7.centos.x86_64 providing ntp is already installed&quot; ]&#125;步骤2：启动ntp服务,并设置为开机启动12345678910111213141516171819202122232425262728[root@Ansible ~]# ansible all -m service -a &quot;name=ntpd state=started enabled=yes&quot;36.103.245.138 | SUCCESS =&gt; &#123; &quot;changed&quot;: false, &quot;enabled&quot;: true, &quot;name&quot;: &quot;ntpd&quot;, &quot;state&quot;: &quot;started&quot;, &quot;status&quot;: &#123; ...... &#125;&#125;36.103.245.70 | SUCCESS =&gt; &#123; &quot;changed&quot;: false, &quot;enabled&quot;: true, &quot;name&quot;: &quot;ntpd&quot;, &quot;state&quot;: &quot;started&quot;, &quot;status&quot;: &#123; ...... &#125;&#125;36.103.245.135 | SUCCESS =&gt; &#123; &quot;changed&quot;: false, &quot;enabled&quot;: true, &quot;name&quot;: &quot;ntpd&quot;, &quot;state&quot;: &quot;started&quot;, &quot;status&quot;: &#123; ...... &#125;&#125;","categories":[{"name":"Ansable","slug":"Ansable","permalink":"http://blog.wubolive.com/categories/Ansable/"}],"tags":[{"name":"Ansible","slug":"Ansible","permalink":"http://blog.wubolive.com/tags/Ansible/"},{"name":"Linux","slug":"Linux","permalink":"http://blog.wubolive.com/tags/Linux/"}]},{"title":"Ansible常用模块收录册","slug":"ansible-mode","date":"2018-11-30T06:11:28.000Z","updated":"2018-11-30T13:43:17.726Z","comments":true,"path":"2018/11/30/ansible-mode/","link":"","permalink":"http://blog.wubolive.com/2018/11/30/ansible-mode/","excerpt":"","text":"Ansible常用模块，长期更新…yum模块yum：RedHat/CentOS包管理工具12345678910111213常用选项：– config_file：yum的配置文件 （optional） – disable_gpg_check：关闭gpg_check （optional） – disablerepo：不启用某个源 （optional） – enablerepo：启用某个源（optional） – name：要进行操作的软件包的名字，默认最新的程序包，指明要安装的程序包，可以带上版本号，也可以传递一个url或者一个本地的rpm包的路径 – state：状态（present，absent，latest），表示是安装还卸载 present:默认的，表示为安装 lastest: 安装为最新的版本 absent：表示删除 示例：[root@Ansible ~]# ansible all -m yum -a &apos;name=httpd state=latest&apos;","categories":[{"name":"Ansable","slug":"Ansable","permalink":"http://blog.wubolive.com/categories/Ansable/"}],"tags":[{"name":"Ansible","slug":"Ansible","permalink":"http://blog.wubolive.com/tags/Ansible/"},{"name":"Linux","slug":"Linux","permalink":"http://blog.wubolive.com/tags/Linux/"}]},{"title":"Ansible安装与配置","slug":"ansible-install","date":"2018-11-30T06:10:28.000Z","updated":"2018-11-30T13:43:11.878Z","comments":true,"path":"2018/11/30/ansible-install/","link":"","permalink":"http://blog.wubolive.com/2018/11/30/ansible-install/","excerpt":"","text":"本文讲述如何安装Ansible环境，了解Ansible基本配置、运行测试安装AnsibleCentOS 7系统安装Ansible(yum方式)1234#安装ansible yum源rpm -Uvh http://mirrors.zju.edu.cn/epel/7/x86_64/Packages/e/epel-release-7-11.noarch.rpm#yum安装ansibleyum -y install ansible配置Ansible主配置文件常用配置12345678910111213141516171819[root@CentOS ~]# vim /etc/ansible/ansible.cfg[defaults]# 存放主机列表文件inventory = /etc/ansible/hosts# 指向Ansible模块目录library = /usr/share/my_modules/# 配置Ansible最大运行进程forks = 5# 设置默认执行命令的用户sudo_user = root# 配置管理节点的管理端口remote_port = 22# 配置是否检查SSH主机密钥host_key_checking = False# SSH超时时间timeout = 60# 指定存放Ansible日志的文件log_path = /var/log/ansible.log业务环境角色主机名IP地址组名控制主机ansable36.103.245.156—被管理节点master36.103.245.135k8server被管理节点node136.103.245.138k8server被管理节点node236.103.245.70k8server配置Linux主机ssh无密钥访问12345678910111213141516171819202122232425#生成密钥[root@Ansible ~]# ssh-keygen#将公钥分发到被管理节点[root@Ansible ~]# ssh-copy-id -i .ssh/id_rsa.pub root@36.103.245.135/usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: &quot;.ssh/id_rsa.pub&quot;The authenticity of host &apos;36.103.245.135 (36.103.245.135)&apos; can&apos;t be established.ECDSA key fingerprint is SHA256:ZTtQLCTg21cYLQ5iJa5LkC51xN6lKGxVyLRAxjXPUOw.ECDSA key fingerprint is MD5:6d:5b:e9:d9:bd:12:64:06:c5:cc:a2:07:a6:99:96:3d.Are you sure you want to continue connecting (yes/no)? yes/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keysroot@36.103.245.135&apos;s password: Number of key(s) added: 1Now try logging into the machine, with: &quot;ssh &apos;root@36.103.245.135&apos;&quot;and check to make sure that only the key(s) you wanted were added.## 对node1及node2作相同的配置#测试是否免密登入[root@Ansible ~]# ssh 36.103.245.135Last failed login: Wed Sep 5 10:06:49 CST 2018 from 118.24.129.24 on ssh:nottyThere were 27 failed login attempts since the last successful login.Last login: Wed Sep 5 09:50:20 2018 from 36.103.245.156Ansible 小测试首先可以查看一下ansible的软件版本信息1234567[root@Ansible ~]# ansible --versionansible 2.6.3 config file = /etc/ansible/ansible.cfg configured module search path = [u&apos;/usr/share/my_modules&apos;] ansible python module location = /usr/lib/python2.7/site-packages/ansible executable location = /usr/bin/ansible python version = 2.7.5 (default, Nov 6 2016, 00:28:07) [GCC 4.8.5 20150623 (Red Hat 4.8.5-11)]主机连通性测试使用Ansible需要先定于主机与组的配置，默认文件在/etc/ansible/hosts12345678910111213141516[root@Ansible ~]# cat /etc/ansible/hosts# 定义主机#master.wubolive.com#node1.wubolive.com#node2.wubolive.com36.103.245.13536.103.245.13836.103.245.70# 定义组(组名需要用[]括起来)[k8server]#master.wubolive.com#node1.wubolive.com#node2.wubolive.com36.103.245.13536.103.245.13836.103.245.70定义完成后使用ping模块对单主机进行ping操作12345[root@Ansible ~]# ansible 36.103.245.135 -m ping36.103.245.135 | SUCCESS =&gt; &#123; &quot;changed&quot;: false, &quot;ping&quot;: &quot;pong&quot;&#125;对k8server组进行ping操作12345678910111213[root@Ansible ~]# ansible k8server -m ping 36.103.245.138 | SUCCESS =&gt; &#123; &quot;changed&quot;: false, &quot;ping&quot;: &quot;pong&quot;&#125;36.103.245.70 | SUCCESS =&gt; &#123; &quot;changed&quot;: false, &quot;ping&quot;: &quot;pong&quot;&#125;36.103.245.135 | SUCCESS =&gt; &#123; &quot;changed&quot;: false, &quot;ping&quot;: &quot;pong&quot;&#125;在被管理节点批量执行命令在用户目录创建一个资源清单文件inventory.cfg12345[root@Ansible ~]# cat inventory.cfg [k8server]36.103.245.13536.103.245.13836.103.245.70用ansible的shell模块对k8server组各服务器显示‘hello ansible！’123456789[root@Ansible ~]# ansible k8server -m shell -a &apos;/bin/echo hello ansible!&apos; -i inventory.cfg 36.103.245.70 | SUCCESS | rc=0 &gt;&gt;hello ansible!36.103.245.138 | SUCCESS | rc=0 &gt;&gt;hello ansible!36.103.245.135 | SUCCESS | rc=0 &gt;&gt;hello ansible!用command模块也可以执行相同操作123456789[root@Ansible ~]# ansible k8server -m command -a &apos;/bin/echo hello ansible!&apos; -i inventory.cfg 36.103.245.138 | SUCCESS | rc=0 &gt;&gt;hello ansible!36.103.245.70 | SUCCESS | rc=0 &gt;&gt;hello ansible!36.103.245.135 | SUCCESS | rc=0 &gt;&gt;hello ansible!获取帮助信息12345678910# 查看ansible命令帮助使用-h选项[root@Ansible ~]# ansible -h# 用ansible-doc列出ansible系统支持的模块[root@Ansible ~]# ansible-doc -l# 用ansible-doc加模块名称，可以显示该模块的描述和使用示例[root@Ansible ~]# ansible-doc yum# ansible-doc -s选项可以列出模块的动作[root@Ansible ~]# ansible-doc -s yum另外，在Ansible调试脚本时，可以使用-v或者-vvv显示详细的输出结果123[root@Ansible ~]# ansible k8server -i inventory.cfg -m ping -v# 或[root@Ansible ~]# ansible k8server -i inventory.cfg -m ping -vvv","categories":[{"name":"Ansable","slug":"Ansable","permalink":"http://blog.wubolive.com/categories/Ansable/"}],"tags":[{"name":"Ansible","slug":"Ansible","permalink":"http://blog.wubolive.com/tags/Ansible/"},{"name":"Linux","slug":"Linux","permalink":"http://blog.wubolive.com/tags/Linux/"}]}]}